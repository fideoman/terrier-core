/* Generated By:JavaCC: Do not edit this line. MatchOpQLParser.java */
package org.terrier.matching.matchops;

import org.terrier.querying.parser.Query.QTPBuilder;
import org.terrier.matching.MatchingQueryTerms.MatchingTerm;
import org.terrier.matching.models.WeightingModelFactory;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import java.io.StringReader;
import java.io.BufferedReader;
import java.io.InputStreamReader;


@SuppressWarnings("all")
public class MatchOpQLParser implements MatchOpQLParserConstants {
    private final static boolean DEBUG = false;

    public MatchOpQLParser(String r) {
        this(new StringReader(r));
    }

    public static void main(String args[])
    {
        try
        {
                if (args.length == 1 && args[0].equals("-"))
                {
                        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
                        String line = null;
                        while((line = br.readLine())!= null) {
                                MatchOpQLParser parser = new MatchOpQLParser(line.trim());
                                System.out.println(parser.parseAll());
                        }
                }
                else
                {
                    String query = args[0];
                    MatchOpQLParser parser = new MatchOpQLParser(query);
                    System.out.println(parser.parse());
                }
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }

  final public List<MatchingTerm> parseOne() throws ParseException {
        List<MatchingTerm> rtrList = new ArrayList<MatchingTerm>();
        MatchingTerm newWord = null;
        List<MatchingTerm> newWords = null;
    if (jj_2_1(2147483647)) {
      jj_consume_token(HASH);
      jj_consume_token(TAG);
      newWords = tag();
                                          rtrList.addAll(newWords);
    } else if (jj_2_2(2147483647)) {
      jj_consume_token(HASH);
      jj_consume_token(COMBINE);
      newWords = combine();
                                                  rtrList.addAll(newWords);
    } else if (jj_2_3(3)) {
      newWord = parse();
                              rtrList.add(newWord);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return rtrList;}
    throw new Error("Missing return statement in function");
  }

  final public List<MatchingTerm> parseAll() throws ParseException {
        List<MatchingTerm> rtrList = new ArrayList<MatchingTerm>();
        List<MatchingTerm> newWords = null;
    label_1:
    while (true) {
      newWords = parseOne();
                                rtrList.addAll(newWords);
      if (jj_2_4(3)) {
        ;
      } else {
        break label_1;
      }
    }
                {if (true) return rtrList;}
    throw new Error("Missing return statement in function");
  }

  final public MatchingTerm parse() throws ParseException {
        MatchingTerm rtr = null;
    if (jj_2_13(3)) {
      jj_consume_token(HASH);
      if (jj_2_5(3)) {
        rtr = syn();
      } else if (jj_2_6(3)) {
        rtr = band();
      } else if (jj_2_7(3)) {
        rtr = uw();
      } else if (jj_2_8(3)) {
        rtr = ow();
      } else if (jj_2_9(3)) {
        rtr = ow_implicit();
      } else if (jj_2_10(3)) {
        rtr = prefix();
      } else if (jj_2_11(3)) {
        rtr = fuzzy();
      } else if (jj_2_12(3)) {
        rtr = base64();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else if (jj_2_14(3)) {
      rtr = word();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return rtr;}
    throw new Error("Missing return statement in function");
  }

  final public List<MatchingTerm> combine() throws ParseException {
        List<MatchingTerm> allInnerWords = new ArrayList<MatchingTerm>();
        List<MatchingTerm> innerWords = null;
        Token key;
        Token value;
        int offset = 0;
        Map<String,String> kv = new HashMap<String,String>();
    if (jj_2_16(3)) {
      jj_consume_token(COLON);
      key = jj_consume_token(WORD_OR_INT_OR_FLOAT);
      jj_consume_token(EQUALS);
      value = jj_consume_token(WORD_OR_INT_OR_FLOAT);
                                                                                                  kv.put(key.image, value.image);
      label_2:
      while (true) {
        if (jj_2_15(3)) {
          ;
        } else {
          break label_2;
        }
        jj_consume_token(COLON_KV);
        key = jj_consume_token(WORD_OR_INT_OR_FLOAT);
        jj_consume_token(EQUALS);
        value = jj_consume_token(WORD_OR_INT_OR_FLOAT);
                                                                                                             kv.put(key.image, value.image);
      }
      jj_consume_token(OPEN_PAREN_KV);
    } else if (jj_2_17(3)) {
      jj_consume_token(OPEN_PAREN);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_3:
    while (true) {
      innerWords = parseOne();
                  for(MatchingTerm qt : innerWords)
                  {
                        if (kv.containsKey(String.valueOf(offset)))
                        {
                                qt.getValue().setWeight(qt.getValue().getWeight() * Double.parseDouble(kv.get(String.valueOf(offset))));
                        }
              }
                  offset++;
                  allInnerWords.addAll(innerWords);
      if (jj_2_18(3)) {
        ;
      } else {
        break label_3;
      }
    }
    jj_consume_token(CLOSE_PAREN);
                //allow #combine to set the weighting model for all terms in the group
                if (kv.containsKey("wmodel"))
                {
                        String wmodelName = kv.get("wmodel");
                        for(MatchingTerm qt : allInnerWords)
                        {
                                qt.getValue().termModels.clear();
                                qt.getValue().termModels.add(WeightingModelFactory.newInstance(wmodelName));
                        }
                }
                //allow #combine to set the requirement for all terms in the group
                if (kv.containsKey("req"))
                {
                        boolean req = Boolean.parseBoolean(kv.get("req"));
                        for(MatchingTerm qt : allInnerWords)
                        {
                                qt.getValue().setRequired(req);
                        }
                }
                //allow #combine to set the tag for all terms in the group 
                if (kv.containsKey("tag"))
                {
                        String tag = kv.get("tag");
                        for(MatchingTerm qt : allInnerWords)
                        {
                                qt.getValue().setTag(tag);
                        }
                }
        {if (true) return allInnerWords;}
    throw new Error("Missing return statement in function");
  }

  final public List<MatchingTerm> tag() throws ParseException {
        List<MatchingTerm> innerWords = null;
        Token tagName;
    jj_consume_token(OPEN_PAREN);
    tagName = jj_consume_token(WORD);
    innerWords = parseAll();
    jj_consume_token(CLOSE_PAREN);
        for(MatchingTerm qt : innerWords)
        {
                qt.getValue().setTag(tagName.image);
        }
        {if (true) return innerWords;}
    throw new Error("Missing return statement in function");
  }

  final public MatchingTerm prefix() throws ParseException {
  MatchingTerm newWord = null;
    jj_consume_token(PREFIX);
    jj_consume_token(OPEN_PAREN);
    newWord = word();
    jj_consume_token(CLOSE_PAREN);
    {if (true) return QTPBuilder.of(new PrefixTermOp( ((SingleTermOp) newWord.getKey()).getTerm())).build();}
    throw new Error("Missing return statement in function");
  }

  final public MatchingTerm syn() throws ParseException {
  List<Operator> words = new ArrayList<Operator>();
  MatchingTerm newWord = null;
    jj_consume_token(SYN);
    jj_consume_token(OPEN_PAREN);
    label_4:
    while (true) {
      newWord = parse();
                                          words.add(newWord.getKey());
      if (jj_2_19(3)) {
        ;
      } else {
        break label_4;
      }
    }
    jj_consume_token(CLOSE_PAREN);
    {if (true) return QTPBuilder.of(new SynonymOp(words.toArray(new Operator[words.size()]))).build();}
    throw new Error("Missing return statement in function");
  }

  final public MatchingTerm band() throws ParseException {
  List<Operator> words = new ArrayList<Operator>();
  MatchingTerm newWord = null;
    jj_consume_token(BAND);
    jj_consume_token(OPEN_PAREN);
    label_5:
    while (true) {
      newWord = parse();
                                            words.add(newWord.getKey());
      if (jj_2_20(3)) {
        ;
      } else {
        break label_5;
      }
    }
    jj_consume_token(CLOSE_PAREN);
    {if (true) return QTPBuilder.of(new ANDQueryOp(words.toArray(new Operator[words.size()]))).build();}
    throw new Error("Missing return statement in function");
  }

  final public MatchingTerm uw() throws ParseException {
  List<Operator> words = new ArrayList<Operator>();
  MatchingTerm newWord = null;
  Token dist;
    jj_consume_token(UW);
    dist = jj_consume_token(INT);
    jj_consume_token(OPEN_PAREN);
    label_6:
    while (true) {
      newWord = parse();
                                                     words.add(newWord.getKey());
      if (jj_2_21(3)) {
        ;
      } else {
        break label_6;
      }
    }
    jj_consume_token(CLOSE_PAREN);
    {if (true) return QTPBuilder.of(new UnorderedWindowOp(words.toArray(new Operator[words.size()]), Integer.parseInt(dist.image))).build();}
    throw new Error("Missing return statement in function");
  }

  final public MatchingTerm ow() throws ParseException {
  List<Operator> words = new ArrayList<Operator>();
  MatchingTerm newWord = null;
  Token dist;
    jj_consume_token(OW);
    dist = jj_consume_token(INT);
    jj_consume_token(OPEN_PAREN);
    label_7:
    while (true) {
      newWord = parse();
                                                     words.add(newWord.getKey());
      if (jj_2_22(3)) {
        ;
      } else {
        break label_7;
      }
    }
    jj_consume_token(CLOSE_PAREN);
    int iDist = Integer.parseInt(dist.image);
        if (iDist != 1)
        {
                {if (true) throw new ParseException("Ordered windows > 1 not yet supported");}
        }
    {if (true) return QTPBuilder.of(new PhraseOp(words.toArray(new Operator[words.size()]))).build();}
    throw new Error("Missing return statement in function");
  }

  final public MatchingTerm ow_implicit() throws ParseException {
  List<Operator> words = new ArrayList<Operator>();
  MatchingTerm newWord = null;
  Token dist;
    dist = jj_consume_token(INT);
    jj_consume_token(OPEN_PAREN);
    label_8:
    while (true) {
      newWord = parse();
                                               words.add(newWord.getKey());
      if (jj_2_23(3)) {
        ;
      } else {
        break label_8;
      }
    }
    jj_consume_token(CLOSE_PAREN);
        int iDist = Integer.parseInt(dist.image);
        if (iDist != 1)
        {
                {if (true) throw new ParseException("Ordered windows > 1 not yet supported");}
        }
    {if (true) return QTPBuilder.of(new PhraseOp(words.toArray(new Operator[words.size()]))).build();}
    throw new Error("Missing return statement in function");
  }

  final public MatchingTerm fuzzy() throws ParseException {
        Token word;
        Token key;
        Token value;
        Token field = null;
        Map<String,String> kv = new HashMap<String,String>();
    jj_consume_token(FUZZY);
    if (jj_2_25(3)) {
      jj_consume_token(COLON);
      key = jj_consume_token(WORD_OR_INT_OR_FLOAT);
      jj_consume_token(EQUALS);
      value = jj_consume_token(WORD_OR_INT_OR_FLOAT);
                                                                                                  kv.put(key.image, value.image);
      label_9:
      while (true) {
        if (jj_2_24(3)) {
          ;
        } else {
          break label_9;
        }
        jj_consume_token(COLON_KV);
        key = jj_consume_token(WORD_OR_INT_OR_FLOAT);
        jj_consume_token(EQUALS);
        value = jj_consume_token(WORD_OR_INT_OR_FLOAT);
                                                                                                             kv.put(key.image, value.image);
      }
      jj_consume_token(OPEN_PAREN_KV);
    } else if (jj_2_26(3)) {
      jj_consume_token(OPEN_PAREN);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    word = jj_consume_token(WORD);
    jj_consume_token(CLOSE_PAREN);
                String fieldName = null;
                byte[] decoded = java.util.Base64.getMimeDecoder().decode(word.image);
                String search = word.image;
                Integer prefix_length = null;
                Integer maxDist = null;
                Integer lowT = null;
                Integer highT = null;
                Integer maxExpansions = null;
                if (kv.containsKey("max_expansions"))
                        maxExpansions = Integer.parseInt(kv.get("max_expansions"));
                if (kv.containsKey("prefix_length"))
                        prefix_length = Integer.parseInt(kv.get("prefix_length"));
                if (kv.containsKey("fuzziness"))
                {
                        if ("AUTO".equals(kv.get("fuzziness")))
                                maxDist = null;
                        else if (kv.get("fuzziness").startsWith("AUTO"))
                        {
                                String[] parts = kv.get("fuzziness").split("\u005c\u005c.");
                                if (parts.length > 1)
                                        lowT = Integer.parseInt(parts[1]);
                                if (parts.length > 2)
                                        lowT = Integer.parseInt(parts[2]);
                        }
                        else
                        {
                                maxDist = Integer.parseInt(kv.get("fuzziness"));
                        }
                }

                {if (true) return QTPBuilder.of(new FuzzyTermOp(search, prefix_length, maxExpansions, maxDist, lowT, highT)).build();}
    throw new Error("Missing return statement in function");
  }

  final public MatchingTerm base64() throws ParseException {
        Token word;
        Token field = null;
    jj_consume_token(BASE64);
    jj_consume_token(OPEN_PAREN);
    word = jj_consume_token(BASE64WORD);
    jj_consume_token(CLOSE_PAREN);
    if (jj_2_27(3)) {
      jj_consume_token(PERIOD);
      field = jj_consume_token(WORD);
    } else {
      ;
    }
                String fieldName = null;
                byte[] decoded = java.util.Base64.getMimeDecoder().decode(word.image);
                String term = new String(decoded);
                if (field != null)
                        fieldName = field.image;
                {if (true) return QTPBuilder.of(new SingleTermOp(term, fieldName)).build();}
    throw new Error("Missing return statement in function");
  }

  final public MatchingTerm word() throws ParseException {
        Token word;
        Token field = null;
    word = jj_consume_token(WORD);
    if (jj_2_28(3)) {
      jj_consume_token(PERIOD);
      field = jj_consume_token(WORD);
    } else {
      ;
    }
                String fieldName = null;
                if (field != null)
                        fieldName = field.image;
                {if (true) return QTPBuilder.of(new SingleTermOp(word.image, fieldName)).build();}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_3R_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3_17()) return true;
    }
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_scan_token(BAND)) return true;
    if (jj_scan_token(OPEN_PAREN)) return true;
    Token xsp;
    if (jj_3_20()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_20()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_24() {
    if (jj_scan_token(COLON_KV)) return true;
    if (jj_scan_token(WORD_OR_INT_OR_FLOAT)) return true;
    if (jj_scan_token(EQUALS)) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_scan_token(SYN)) return true;
    if (jj_scan_token(OPEN_PAREN)) return true;
    Token xsp;
    if (jj_3_19()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_19()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3_27() {
    if (jj_scan_token(PERIOD)) return true;
    if (jj_scan_token(WORD)) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3_25() {
    if (jj_scan_token(COLON)) return true;
    if (jj_scan_token(WORD_OR_INT_OR_FLOAT)) return true;
    if (jj_scan_token(EQUALS)) return true;
    return false;
  }

  private boolean jj_3_26() {
    if (jj_scan_token(OPEN_PAREN)) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_scan_token(HASH)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_scan_token(PREFIX)) return true;
    if (jj_scan_token(OPEN_PAREN)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) return true;
    }
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_scan_token(FUZZY)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_25()) {
    jj_scanpos = xsp;
    if (jj_3_26()) return true;
    }
    if (jj_scan_token(WORD)) return true;
    return false;
  }

  private boolean jj_3_23() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_scan_token(OPEN_PAREN)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(HASH)) return true;
    if (jj_scan_token(COMBINE)) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(HASH)) return true;
    if (jj_scan_token(TAG)) return true;
    return false;
  }

  private boolean jj_3_28() {
    if (jj_scan_token(PERIOD)) return true;
    if (jj_scan_token(WORD)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_scan_token(HASH)) return true;
    if (jj_scan_token(COMBINE)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_scan_token(HASH)) return true;
    if (jj_scan_token(TAG)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3_21() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_scan_token(INT)) return true;
    if (jj_scan_token(OPEN_PAREN)) return true;
    Token xsp;
    if (jj_3_23()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_23()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3_3()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_scan_token(WORD)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_28()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_scan_token(COLON_KV)) return true;
    if (jj_scan_token(WORD_OR_INT_OR_FLOAT)) return true;
    if (jj_scan_token(EQUALS)) return true;
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_scan_token(OW)) return true;
    if (jj_scan_token(INT)) return true;
    if (jj_scan_token(OPEN_PAREN)) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_scan_token(BASE64)) return true;
    if (jj_scan_token(OPEN_PAREN)) return true;
    if (jj_scan_token(BASE64WORD)) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_scan_token(OPEN_PAREN)) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_scan_token(COLON)) return true;
    if (jj_scan_token(WORD_OR_INT_OR_FLOAT)) return true;
    if (jj_scan_token(EQUALS)) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_scan_token(UW)) return true;
    if (jj_scan_token(INT)) return true;
    if (jj_scan_token(OPEN_PAREN)) return true;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_3R_10()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public MatchOpQLParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[28];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public MatchOpQLParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MatchOpQLParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MatchOpQLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public MatchOpQLParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MatchOpQLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public MatchOpQLParser(MatchOpQLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(MatchOpQLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        exists = true;
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[27];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 27; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 28; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
